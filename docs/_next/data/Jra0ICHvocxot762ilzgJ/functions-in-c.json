{"pageProps":{"mdContent":"<p>Some predefined functions have been the <a href=\"math-functions-in-c\">Math Functions in C</a> and <a href=\"file-io-in-c\">File IO in C</a> functions</p>\n<p>Custom functions can be defined in C to modularize programs:</p>\n<pre><code class=\"language-c\">int func(int a, int b) {\n\treturn a + b;\n}\n</code></pre>\n<p>Function parameters and return values receive and send back information to/from functions</p>\n<blockquote>\n<p>Sometimes, a function with no arguments can be written as <code>func(void)</code>, or just <code>func()</code></p>\n</blockquote>\n<h1>Passing by Value</h1>\n<p>Primitive (<a href=\"variables-and-types-in-c\">Variables and Types in C</a>) data types are <strong>passed by value</strong>, meaning that a copy of the value is given to the function</p>\n<blockquote>\n<p>Therefore, it is impossible to modify the argument values themselves back in main, unless we explicitly pass by reference</p>\n</blockquote>\n<h1>Function Prototypes</h1>\n<p>Functions typically need to appear <strong>before</strong> the <code>main</code> function to satisfy the compiler. However, we can <strong>declare</strong> the function with the <strong>function prototype</strong> in order to put the function definition after:</p>\n<pre><code class=\"language-c\">float func(int x, int y);\n\nint main(void) {\n\tfunc();\n}\n\nfloat func(int x, int y) {\n\treturn x + y;\n}\n</code></pre>\n<blockquote>\n<p>Parameter names in the function prototype are optional, but can give extra information</p>\n</blockquote>\n<h1>Passing by Reference</h1>\n<p>For larger data types like arrays and <code>struct</code>s, we can pass a reference (pointer) to a function so the function can know where to look for data</p>\n<pre><code class=\"language-c\">#include &#x3C;stdio.h>\nint total(int n[], int len) {\n\tint tot = 0;\n\tfor(int i = 0; i &#x3C; len; i++) {\n\t\ttot += n[i];\n\t}\n\treturn tot;\n}\n\nint main() {\n\tint evens[6] = {0, 2, 4, 6, 8, 10};\n\tprintf(\"%d\\n\", total(evens, 6));\n\treturn 0;\n}\n</code></pre>\n<blockquote>\n<p>We cannot use <code>sizeof</code> inside a function to determine array length, as <code>sizeof</code> will return the size of the pointer instead of the array (as it doesn't know this raw pointer refers to an array). This is why we also need to pass in the number of elements.</p>\n</blockquote>\n<p>Since arrays are passed by reference, modifying them in the function will modify the original data</p>\n<p>We cannot return an array from a function, as it will cause a <strong>dangling pointer</strong>, where a pointer refers to data that doesn't exist anymore.</p>\n<blockquote>\n<p>Instead, we can pass in a reference to be modified by the function.</p>\n</blockquote>","pageTitle":"Functions in C"},"__N_SSG":true}