{"pageProps":{"mdContent":"<p>Multidimensional arrays can be defined in C using this syntax:</p>\n<pre><code class=\"language-c\">// &#x3C;&#x3C;type>> &#x3C;&#x3C;name>>[dim_1][dim_2]\nint table[3, 4] = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}};\n/*\ntable = [\n\t[1, 2, 3, 4],\n\t[5, 6, 7, 8], \n\t[9, 10, 11, 12]\n]\n*/\n</code></pre>\n<p>Multidimensional arrays are stored in memory exactly like one-dimensional arrays - the only difference is convenient addressing/indexing</p>\n<p>In memory, C arrays are stored in <strong>row-major</strong> order, where the first row is stored contiguously in memory, then the second...</p>\n<table>\n<thead>\n<tr>\n<th>0x00</th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th>0x48</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n<td>4</td>\n<td>5</td>\n<td>6</td>\n<td>7</td>\n<td>8</td>\n<td>9</td>\n<td>10</td>\n<td>11</td>\n<td>12</td>\n</tr>\n</tbody>\n</table>\n<p>When specifying multidimensional arrays in memory, all sizes except the outermost must be provided</p>\n<pre><code>void sum_matrix(int list[][4], int numRows)\n</code></pre>\n<blockquote>\n<p>The length of rows is essential for dimensioning the memory offset when addressing between rows<br>\nSince there are 4 <code>int</code>s in each row, we know that each row is 16 bytes<br>\nFirst row is at <code>addr</code>, second row is at <code>addr + 16</code> in memory</p>\n</blockquote>","pageTitle":"Multidimensional Arrays"},"__N_SSG":true}